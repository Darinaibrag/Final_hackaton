import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from django.core.management.base import BaseCommand
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import aiohttp
import tempfile
import os
from urllib.parse import urljoin
from aiogram.types import ReplyKeyboardRemove
import asyncio

# URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API
HOTEL_API_URL_RANDOM = "http://127.0.0.1:8000/post/hotel-random/"
TOUR_API_URL_RANDOM = "http://127.0.0.1:8000/post/tour-random/"
TOP_RATED_HOTELS_API_URL = "http://127.0.0.1:8000/post/hotel-next/"
ACTIVITY_TYPE_TOUR_API_URL = "http://127.0.0.1:8000/post/tour-next/"

API_TOKEN = "6012004719:AAFwyJYzUxhlBj9y-7XMWUxVdEtTFtJfh44"

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dispatcher = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


class UserState(StatesGroup):
    start = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
    hotel = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–µ–ª—è
    tour = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–∞
    exiting = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
    regions_menu = State()


# Handle the /start command
@dispatcher.message_handler(Command('start'), state="*")
async def start_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    button2 = KeyboardButton('üöÄ –ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏')
    button3 = KeyboardButton('‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞')
    keyboard.add(button1, button2, button3)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    welcome_message = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ kayakta_bot!\n"
                       "–ú—ã –≥–æ—Ä–¥–∏–º—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞, –∏ —Ö–æ—Ç–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å —É–≤–∏–¥–µ—Ç—å –≤—Å—é –∫—Ä–∞—Å–æ—Ç—É –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã —Å–≤–æ–∏–º–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏!\n"
                       "–ú–æ—è —Ü–µ–ª—å - –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—É—Ä –∏ –æ—Ç–µ–ª—å –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω.\n"
                       "–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏:")

    await message.reply(welcome_message, reply_markup=keyboard)
    await UserState.start.set()


@dispatcher.message_handler(lambda message: message.text == 'üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', state="*")
async def support_command(message: types.Message, state: FSMContext):
    support_message = (
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n"
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏: kaykta_support@gmail.com"
    )
    await message.answer(support_message)
    await state.finish()

@dispatcher.message_handler(lambda message: message.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞', state="*")
async def exit_bot(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardRemove()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ '‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞'. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=markup)
    await bot.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
    await state.finish()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöÄ –ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏"
@dispatcher.message_handler(lambda message: message.text == 'üöÄ –ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏', state="*")
async def regions_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–µ–ª–µ–π –∏ —Ç—É—Ä–æ–≤
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    hotels_button = KeyboardButton('üè® –û—Ç–µ–ª–∏ –≤ –ë–∏—à–∫–µ–∫–µ')
    tours_button = KeyboardButton('üåÑ –¢—É—Ä—ã –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É')
    back_button = KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(hotels_button, tours_button, back_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π:", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ regions_menu –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É –æ—Ç–µ–ª—è–º–∏ –∏ —Ç—É—Ä–∞–º–∏
    await UserState.regions_menu.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "üè® –û—Ç–µ–ª–∏ –≤ –ë–∏—à–∫–µ–∫–µ"
@dispatcher.message_handler(lambda message: message.text == 'üè® –û—Ç–µ–ª–∏ –≤ –ë–∏—à–∫–µ–∫–µ', state=UserState.regions_menu)
async def hotels_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–µ–ª–µ–π –≤ –ë–∏—à–∫–µ–∫–µ
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    by_rating_button = KeyboardButton('üîù –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É –æ—Ç–µ–ª–µ–π')
    random_hotel_button = KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–µ–ª—å')
    back_button = KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(by_rating_button, random_hotel_button, back_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –æ—Ç–µ–ª—è:", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–µ–ª–µ–π –≤ –ë–∏—à–∫–µ–∫–µ
    await UserState.hotel.set()


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


# ...

from aiogram.dispatcher import FSMContext

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "üîù –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É –æ—Ç–µ–ª–µ–π"
@dispatcher.message_handler(lambda message: message.text == 'üîù –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É –æ—Ç–µ–ª–µ–π', state=UserState.hotel)
async def top_rated_hotels_command(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(TOP_RATED_HOTELS_API_URL) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    avg_rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üè® –û—Ç–µ–ª—å: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file), caption=hotel_info)

                    os.remove(temp_image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_hotels"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_hotels"))

                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

                else:
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
        except Exception as e:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
            print(str(e))  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


@dispatcher.callback_query_handler(lambda query: query.data == "next_page_hotels", state=UserState.hotel)
async def next_page_hotels_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            next_link = data.get("next_link")

            async with session.get(next_link) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    avg_rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üè® –û—Ç–µ–ª—å: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=hotel_info)

                    os.remove(temp_image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_hotels"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_hotels"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                    # await callback_query.message.edit_reply_markup(reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
            print(str(e))


@dispatcher.callback_query_handler(lambda query: query.data == "previous_page_hotels", state=UserState.hotel)
async def previous_page_hotels_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            previous_link = data.get("previous_link")

            async with session.get(previous_link) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    avg_rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üè® –û—Ç–µ–ª—å: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=hotel_info)

                    os.remove(temp_image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª


                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_hotels"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_hotels"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                    # await callback_query.message.edit_reply_markup(reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
            print(str(e))


@dispatcher.message_handler(lambda message: message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–µ–ª—å', state=UserState.hotel)
async def random_hotel_command(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(HOTEL_API_URL_RANDOM) as response:
                if response.status == 200:
                    hotel_data = await response.json()
                    title = hotel_data.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = hotel_data.get("preview", "")
                    price = hotel_data.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = hotel_data.get("rating", {}).get("rating__avg", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = hotel_data.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üè® –û—Ç–µ–ª—å: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file), caption=hotel_info)

                    os.remove(temp_image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                else:
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª–µ.")
        except Exception as e:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª–µ.")
            print(str(e))  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "üåÑ –¢—É—Ä—ã –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É"
@dispatcher.message_handler(lambda message: message.text == 'üåÑ –¢—É—Ä—ã –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É', state=UserState.regions_menu)
async def tours_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç—É—Ä–æ–≤ –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    by_type_button = KeyboardButton('üßó‚Äç‚ôÇÔ∏è –ü–æ –≤–∏–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    random_tour_button = KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç—É—Ä')
    back_button = KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    markup.add(by_type_button, random_tour_button, back_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–∞:", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç—É—Ä–æ–≤ –ø–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É
    await UserState.tour.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "üßó‚Äç‚ôÇÔ∏è –ü–æ –≤–∏–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
@dispatcher.message_handler(lambda message: message.text == 'üßó‚Äç‚ôÇÔ∏è –ü–æ –≤–∏–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', state=UserState.tour)
async def activity_type_tours_command(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(ACTIVITY_TYPE_TOUR_API_URL) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(ACTIVITY_TYPE_TOUR_API_URL, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üåÑ –¢—É—Ä: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file), caption=hotel_info)

                    os.remove(temp_image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_activity"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_activity"))

                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

                else:
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
        except Exception as e:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–µ–ª—è—Ö.")
            print(str(e))  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏



@dispatcher.callback_query_handler(lambda query: query.data == "next_page_activity", state=UserState.tour)
async def next_page_tours_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            next_link = data.get("next_link")

            async with session.get(next_link) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üåÑ –¢—É—Ä: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=hotel_info)

                    os.remove(temp_image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_activity"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_activity"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                    # await callback_query.message.edit_reply_markup(reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–∞—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–∞—Ö.")
            print(str(e))



@dispatcher.callback_query_handler(lambda query: query.data == "previous_page_activity", state=UserState.tour)
async def previous_page_tours_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            previous_link = data.get("previous_link")

            async with session.get(previous_link) as response:
                if response.status == 200:
                    hotels_data = await response.json()
                    results = hotels_data.get("results", {})
                    next_link = hotels_data.get("next")
                    previous_link = hotels_data.get("previous")

                    title = results.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = results.get("preview", "")
                    price = results.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = results.get("rating", {}).get("avg_rating", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = results.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(HOTEL_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üåÑ –¢—É—Ä: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=hotel_info)

                    os.remove(temp_image_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if hotels_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_page_activity"))
                    if hotels_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_page_activity"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                    # await callback_query.message.edit_reply_markup(reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–∞—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–∞—Ö.")
            print(str(e))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç—É—Ä"

@dispatcher.message_handler(lambda message: message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç—É—Ä', state=UserState.tour)
async def random_tour_command(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(TOUR_API_URL_RANDOM) as response:
                if response.status == 200:
                    hotel_data = await response.json()
                    title = hotel_data.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    relative_preview = hotel_data.get("preview", "")
                    price = hotel_data.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = hotel_data.get("rating", {}).get("rating__avg", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    rating_count = hotel_data.get("rating", {}).get("rating_count", 0)

                    full_preview_url = urljoin(TOUR_API_URL_RANDOM, relative_preview)

                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    hotel_info = (
                        f"üåÑ –¢—É—Ä: {title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {price} —Å–æ–º\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} (–û—Ç–∑—ã–≤–æ–≤: {rating_count})"
                    )

                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file), caption=hotel_info)

                    os.remove(temp_image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                else:
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–µ.")
        except Exception as e:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–µ.")
            print(str(e))  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@dispatcher.message_handler(lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state='*')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start_command(message, state)




# Handle all messages
@dispatcher.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


def main():
    from aiogram import executor
    executor.start_polling(dispatcher, skip_updates=True)


if __name__ == '__main__':
    main()
